"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeysCountFromSessionStorage = exports.getAllFromSessionStorage = exports.getKeysFromSessionStorage = exports.clearSessionStorage = exports.removeFromSessionStorage = exports.fromSessionStorage = exports.toSessionStorage = void 0;
/**
 * Store value to Session storage
 *
 * @param key - Stored value key
 * @param value - Stored value
 * @returns void
 */
function toSessionStorage(key, value) {
    sessionStorage.setItem(key, JSON.stringify(value));
}
exports.toSessionStorage = toSessionStorage;
/**
 * Get value from Session storage
 *
 * @param key - Stored value key
 * @returns Stored value
 */
function fromSessionStorage(key) {
    return sessionStorage.getItem(key);
}
exports.fromSessionStorage = fromSessionStorage;
/**
 * Remove value from Session storage
 *
 * @param key - Stored value key
 * @returns void
 */
function removeFromSessionStorage(key) {
    sessionStorage.removeItem(key);
}
exports.removeFromSessionStorage = removeFromSessionStorage;
/**
 * Remove all values from Session storage
 *
 * @param except - Except key or key list
 * @returns void
 */
function clearSessionStorage(except) {
    var _a;
    if (except) {
        switch (typeof except) {
            case 'string':
                removeFromStorage(except);
                break;
            case 'object':
                var sessionStorageKeyList = [];
                for (var i = 0, len = sessionStorage.length; i < len; i++) {
                    sessionStorageKeyList.push((_a = sessionStorage.key(i)) !== null && _a !== void 0 ? _a : '');
                }
                sessionStorageKeyList
                    .filter(function (key) { return !except.includes(key); })
                    .forEach(function (key) {
                    sessionStorage.removeItem(key);
                });
                break;
        }
    }
    else {
        sessionStorage.clear();
    }
}
exports.clearSessionStorage = clearSessionStorage;
/**
 * Get all keys from Session storage
 *
 * @returns Stored keys
 */
function getKeysFromSessionStorage() {
    var _a;
    var sessionStorageKeyList = [];
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        sessionStorageKeyList.push((_a = sessionStorage.key(i)) !== null && _a !== void 0 ? _a : '');
    }
    return sessionStorageKeyList;
}
exports.getKeysFromSessionStorage = getKeysFromSessionStorage;
/**
 * Get all keys and values from Session storage
 *
 * @returns Stored keys and values
 */
function getAllFromSessionStorage() {
    var _a;
    var _b, _c;
    var sessionStorageKeyList = [];
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        var keyValue = (_a = {},
            _a[(_b = sessionStorage.key(i)) !== null && _b !== void 0 ? _b : ''] = sessionStorage.getItem((_c = sessionStorage.key(i)) !== null && _c !== void 0 ? _c : ''),
            _a);
        sessionStorageKeyList.push(keyValue);
    }
    return sessionStorageKeyList;
}
exports.getAllFromSessionStorage = getAllFromSessionStorage;
/**
 * Get count of stored keys from Session storage
 *
 * @returns Stored keys count
 */
function getKeysCountFromSessionStorage() {
    return sessionStorage.length;
}
exports.getKeysCountFromSessionStorage = getKeysCountFromSessionStorage;
function removeFromStorage(except) {
    var _a;
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        var removeableKey = (_a = sessionStorage.key(i)) !== null && _a !== void 0 ? _a : '';
        if (!removeableKey.includes(except)) {
            sessionStorage.removeItem(removeableKey);
        }
    }
}
