"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeysCountFromLocalStorage = exports.getAllFromLocalStorage = exports.getKeysFromLocalStorage = exports.clearLocalStorage = exports.removeFromLocalStorage = exports.fromLocalStorage = exports.toLocalStorage = void 0;
/**
 * Store value to Local storage
 * @param key - Stored value key
 * @param value - Stored value
 * @returns - void
 */
function toLocalStorage(key, value) {
    localStorage.setItem(key, JSON.stringify(value));
}
exports.toLocalStorage = toLocalStorage;
/**
 * Get value from Local storage
 *
 * @param key - Stored value key
 * @returns Stored value
 */
function fromLocalStorage(key) {
    return localStorage.getItem(key);
}
exports.fromLocalStorage = fromLocalStorage;
/**
 * Remove value from Local storage
 *
 * @param key - Stored value key
 * @returns void
 */
function removeFromLocalStorage(key) {
    localStorage.removeItem(key);
}
exports.removeFromLocalStorage = removeFromLocalStorage;
/**
 * Remove all values from Local storage
 *
 * @param except - Except key or key list
 * @returns void
 */
function clearLocalStorage(except) {
    var _a;
    if (except) {
        switch (typeof except) {
            case 'string':
                removeFromStorage(except);
                break;
            case 'object':
                var localStorageKeyList = [];
                for (var i = 0, len = localStorage.length; i < len; i++) {
                    localStorageKeyList.push((_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '');
                }
                localStorageKeyList
                    .filter(function (key) { return !except.includes(key); })
                    .forEach(function (key) {
                    localStorage.removeItem(key);
                });
                break;
        }
    }
    else {
        localStorage.clear();
    }
}
exports.clearLocalStorage = clearLocalStorage;
/**
 * Get all keys from Local storage
 *
 * @returns Stored keys
 */
function getKeysFromLocalStorage() {
    var _a;
    var localStorageKeyList = [];
    for (var i = 0, len = localStorage.length; i < len; i++) {
        localStorageKeyList.push((_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '');
    }
    return localStorageKeyList;
}
exports.getKeysFromLocalStorage = getKeysFromLocalStorage;
/**
 * Get all keys and values from Local storage
 *
 * @returns Stored keys and values
 */
function getAllFromLocalStorage() {
    var _a;
    var _b, _c;
    var localStorageKeyList = [];
    for (var i = 0, len = localStorage.length; i < len; i++) {
        var keyValue = (_a = {},
            _a[(_b = localStorage.key(i)) !== null && _b !== void 0 ? _b : ''] = localStorage.getItem((_c = localStorage.key(i)) !== null && _c !== void 0 ? _c : ''),
            _a);
        localStorageKeyList.push(keyValue);
    }
    return localStorageKeyList;
}
exports.getAllFromLocalStorage = getAllFromLocalStorage;
/**
 * Get count of stored keys from Local storage
 *
 * @returns Stored keys count
 */
function getKeysCountFromLocalStorage() {
    return localStorage.length;
}
exports.getKeysCountFromLocalStorage = getKeysCountFromLocalStorage;
function removeFromStorage(except) {
    var _a;
    for (var i = 0, len = localStorage.length; i < len; i++) {
        var removeableKey = (_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '';
        if (!removeableKey.includes(except)) {
            localStorage.removeItem(removeableKey);
        }
    }
}
