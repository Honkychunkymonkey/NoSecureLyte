"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeysCount = exports.getAll = exports.getKeys = exports.clearStorage = void 0;
/**
 * Remove all values from Local and Session storage
 * @param except - Except key or key list
 * @returns void
 */
function clearStorage(except) {
    var _a, _b;
    if (except) {
        switch (typeof except) {
            case 'string':
                removeFromStorage(except);
                break;
            case 'object':
                var localStorageKeyList = [];
                var sessionStorageKeyList = [];
                for (var i = 0, len = localStorage.length; i < len; i++) {
                    localStorageKeyList.push((_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '');
                }
                for (var i = 0, len = sessionStorage.length; i < len; i++) {
                    sessionStorageKeyList.push((_b = sessionStorage.key(i)) !== null && _b !== void 0 ? _b : '');
                }
                localStorageKeyList
                    .filter(function (key) { return !except.includes(key); })
                    .forEach(function (key) {
                    removeItemFromStorage(localStorage, key);
                });
                sessionStorageKeyList
                    .filter(function (key) { return !except.includes(key); })
                    .forEach(function (key) {
                    removeItemFromStorage(sessionStorage, key);
                });
                break;
        }
    }
    else {
        localStorage.clear();
        sessionStorage.clear();
    }
}
exports.clearStorage = clearStorage;
/**
 * Get all keys from Local and Session storage
 *
 * @returns Stored keys from Local and Session storage
 */
function getKeys() {
    var _a, _b;
    var localStorageKeyList = [];
    var sessionStorageKeyList = [];
    for (var i = 0, len = localStorage.length; i < len; i++) {
        localStorageKeyList.push((_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '');
    }
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        sessionStorageKeyList.push((_b = sessionStorage.key(i)) !== null && _b !== void 0 ? _b : '');
    }
    return { localStorage: localStorageKeyList, sessionStorage: sessionStorageKeyList };
}
exports.getKeys = getKeys;
/**
 * Get all keys and values from Local and Session storage
 *
 * @returns Stored keys and values from Local and Session storage
 */
function getAll() {
    var _a, _b;
    var _c, _d, _e, _f;
    var localStorageKeyList = [];
    var sessionStorageKeyList = [];
    for (var i = 0, len = localStorage.length; i < len; i++) {
        var keyValue = (_a = {},
            _a[(_c = localStorage.key(i)) !== null && _c !== void 0 ? _c : ''] = localStorage.getItem((_d = localStorage.key(i)) !== null && _d !== void 0 ? _d : ''),
            _a);
        localStorageKeyList.push(keyValue);
    }
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        var keyValue = (_b = {},
            _b[(_e = sessionStorage.key(i)) !== null && _e !== void 0 ? _e : ''] = sessionStorage.getItem((_f = sessionStorage.key(i)) !== null && _f !== void 0 ? _f : ''),
            _b);
        sessionStorageKeyList.push(keyValue);
    }
    return { localStorage: localStorageKeyList, sessionStorage: sessionStorageKeyList };
}
exports.getAll = getAll;
/**
 * Get count of stored keys from Local and Session storage
 *
 * @returns Stored keys count from Local and Session storage
 */
function getKeysCount() {
    return { localStorage: localStorage.length, sessionStorage: sessionStorage.length };
}
exports.getKeysCount = getKeysCount;
function removeFromStorage(except) {
    var _a, _b;
    for (var i = 0, len = localStorage.length; i < len; i++) {
        var removeableKey = (_a = localStorage.key(i)) !== null && _a !== void 0 ? _a : '';
        if (!removeableKey.includes(except)) {
            removeItemFromStorage(localStorage, removeableKey);
        }
    }
    for (var i = 0, len = sessionStorage.length; i < len; i++) {
        var removeableKey = (_b = sessionStorage.key(i)) !== null && _b !== void 0 ? _b : '';
        if (!removeableKey.includes(except)) {
            removeItemFromStorage(sessionStorage, removeableKey);
        }
    }
}
function removeItemFromStorage(storage, key) {
    storage.removeItem(key);
}
